version: '3.4'

services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  ssh_config:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    user: ${USER}

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USERNAME: ${USER}
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    volumes:
      - ../:${HOME}/src/github.com/dimandzhi/ssh_config:cached
      - ${HOME}/.ssh:${HOME}/.ssh:ro
      - type: bind
        read_only: true
        source: ${HOME}/.gitconfig
        target: ${HOME}/.gitconfig

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 
    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0 # Normaly, unprivileged user cannot bind ports < 1024.
    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
    environment:
      GOFLAGS: -mod=vendor
      GOPATH: ${HOME}
